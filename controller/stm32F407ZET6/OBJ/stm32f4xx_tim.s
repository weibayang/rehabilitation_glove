; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--c99 --split_sections --debug -c -S -o..\obj\stm32f4xx_tim.s --depend=..\obj\stm32f4xx_tim.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\FWLIB\inc -I..\CORE -I..\USER -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\APP\LED -I..\APP\I2Csml -I..\APP\PCA9685 -I..\APP\TLC1543 -I..\APP\USART_DMA -I..\APP\TIM -I..\APP\GMValueDef -I..\APP\SPIADS1256 -I..\APP\USART -I..\APP\MyFunc -I..\APP\STMFlash -I..\APP\SPIAD7606 -IE:\手套实验\new_single_finger\STM32_Vision9―20211213―手套动作实战版\USER\RTE -ID:\keil\ARM\PACK\Keil\STM32F4xx_DFP\2.9.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -ID:\keil\ARM\CMSIS\Include -D__UVISION_VERSION=518 -DSTM32F407xx -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER --omf_browse=..\obj\stm32f4xx_tim.crf ..\FWLIB\src\stm32f4xx_tim.c]
        THUMB
        REQUIRE8
        PRESERVE8

        AREA ||i.TI1_Config||, CODE, READONLY, ALIGN=1

TI1_Config PROC
        PUSH     {r4-r7,lr}
        MOV      r4,r1
        MOV      r5,r2
        MOVS     r1,#0
        MOVS     r2,#0
        LDRH     r6,[r0,#0x20]
        MOV      r7,#0xfffe
        ANDS     r6,r6,r7
        STRH     r6,[r0,#0x20]
        LDRH     r1,[r0,#0x18]
        LDRH     r2,[r0,#0x20]
        MOV      r6,#0xff0c
        ANDS     r1,r1,r6
        ADDS     r6,r7,#1
        AND      r6,r6,r3,LSL #4
        ORRS     r6,r6,r5
        ORRS     r1,r1,r6
        MOV      r6,#0xfff5
        ANDS     r2,r2,r6
        ORR      r6,r4,#1
        ORRS     r2,r2,r6
        STRH     r1,[r0,#0x18]
        STRH     r2,[r0,#0x20]
        POP      {r4-r7,pc}
        ENDP


        AREA ||i.TI2_Config||, CODE, READONLY, ALIGN=1

TI2_Config PROC
        PUSH     {r4-r7,lr}
        MOV      r4,r1
        MOV      r5,r2
        MOVS     r1,#0
        MOVS     r2,#0
        MOVS     r6,#0
        LDRH     r7,[r0,#0x20]
        MOV      r12,#0xffef
        AND      r7,r7,r12
        STRH     r7,[r0,#0x20]
        LDRH     r1,[r0,#0x18]
        LDRH     r2,[r0,#0x20]
        MOV      r7,#0xffff
        AND      r6,r7,r4,LSL #4
        MOV      r7,#0xcff
        ANDS     r1,r1,r7
        MOV      r7,#0xffff
        AND      r7,r7,r3,LSL #12
        ORRS     r1,r1,r7
        MOV      r7,#0xffff
        AND      r7,r7,r5,LSL #8
        ORRS     r1,r1,r7
        MOV      r7,#0xff5f
        ANDS     r2,r2,r7
        ORR      r7,r6,#0x10
        ORRS     r2,r2,r7
        STRH     r1,[r0,#0x18]
        STRH     r2,[r0,#0x20]
        POP      {r4-r7,pc}
        ENDP


        AREA ||i.TI3_Config||, CODE, READONLY, ALIGN=1

TI3_Config PROC
        PUSH     {r4-r7,lr}
        MOV      r4,r1
        MOV      r5,r2
        MOVS     r1,#0
        MOVS     r2,#0
        MOVS     r6,#0
        LDRH     r7,[r0,#0x20]
        MOV      r12,#0xfeff
        AND      r7,r7,r12
        STRH     r7,[r0,#0x20]
        LDRH     r1,[r0,#0x1c]
        LDRH     r2,[r0,#0x20]
        MOV      r7,#0xffff
        AND      r6,r7,r4,LSL #8
        MOV      r7,#0xff0c
        ANDS     r1,r1,r7
        MOV      r7,#0xffff
        AND      r7,r7,r3,LSL #4
        ORRS     r7,r7,r5
        ORRS     r1,r1,r7
        MOV      r7,#0xf5ff
        ANDS     r2,r2,r7
        ORR      r7,r6,#0x100
        ORRS     r2,r2,r7
        STRH     r1,[r0,#0x1c]
        STRH     r2,[r0,#0x20]
        POP      {r4-r7,pc}
        ENDP


        AREA ||i.TI4_Config||, CODE, READONLY, ALIGN=1

TI4_Config PROC
        PUSH     {r4-r7,lr}
        MOV      r4,r1
        MOV      r5,r2
        MOVS     r1,#0
        MOVS     r2,#0
        MOVS     r6,#0
        LDRH     r7,[r0,#0x20]
        MOV      r12,#0xefff
        AND      r7,r7,r12
        STRH     r7,[r0,#0x20]
        LDRH     r1,[r0,#0x1c]
        LDRH     r2,[r0,#0x20]
        MOV      r7,#0xffff
        AND      r6,r7,r4,LSL #12
        MOV      r7,#0xcff
        ANDS     r1,r1,r7
        MOV      r7,#0xffff
        AND      r7,r7,r5,LSL #8
        ORRS     r1,r1,r7
        MOV      r7,#0xffff
        AND      r7,r7,r3,LSL #12
        ORRS     r1,r1,r7
        MOV      r7,#0x5fff
        ANDS     r2,r2,r7
        ORR      r7,r6,#0x1000
        ORRS     r2,r2,r7
        STRH     r1,[r0,#0x1c]
        STRH     r2,[r0,#0x20]
        POP      {r4-r7,pc}
        ENDP


        AREA ||i.TIM_ARRPreloadConfig||, CODE, READONLY, ALIGN=1

TIM_ARRPreloadConfig PROC
        CBZ      r1,|L4.12|
        LDRH     r2,[r0,#0]
        ORR      r2,r2,#0x80
        STRH     r2,[r0,#0]
        B        |L4.22|
|L4.12|
        LDRH     r2,[r0,#0]
        MOV      r3,#0xff7f
        ANDS     r2,r2,r3
        STRH     r2,[r0,#0]
|L4.22|
        BX       lr
        ENDP


        AREA ||i.TIM_BDTRConfig||, CODE, READONLY, ALIGN=1

TIM_BDTRConfig PROC
        LDRH     r2,[r1,#0]
        LDRH     r3,[r1,#2]
        ORRS     r2,r2,r3
        LDRH     r3,[r1,#4]
        ORRS     r2,r2,r3
        LDRH     r3,[r1,#6]
        ORRS     r2,r2,r3
        LDRH     r3,[r1,#8]
        ORRS     r2,r2,r3
        LDRH     r3,[r1,#0xa]
        ORRS     r2,r2,r3
        LDRH     r3,[r1,#0xc]
        ORRS     r2,r2,r3
        STRH     r2,[r0,#0x44]
        BX       lr
        ENDP


        AREA ||i.TIM_BDTRStructInit||, CODE, READONLY, ALIGN=1

TIM_BDTRStructInit PROC
        MOVS     r1,#0
        STRH     r1,[r0,#0]
        STRH     r1,[r0,#2]
        STRH     r1,[r0,#4]
        STRH     r1,[r0,#6]
        STRH     r1,[r0,#8]
        STRH     r1,[r0,#0xa]
        STRH     r1,[r0,#0xc]
        BX       lr
        ENDP


        AREA ||i.TIM_CCPreloadControl||, CODE, READONLY, ALIGN=1

TIM_CCPreloadControl PROC
        CBZ      r1,|L7.12|
        LDRH     r2,[r0,#4]
        ORR      r2,r2,#1
        STRH     r2,[r0,#4]
        B        |L7.22|
|L7.12|
        LDRH     r2,[r0,#4]
        MOV      r3,#0xfffe
        ANDS     r2,r2,r3
        STRH     r2,[r0,#4]
|L7.22|
        BX       lr
        ENDP


        AREA ||i.TIM_CCxCmd||, CODE, READONLY, ALIGN=1

TIM_CCxCmd PROC
        PUSH     {r4,r5,lr}
        MOVS     r3,#0
        MOVS     r4,#1
        LSLS     r4,r4,r1
        UXTH     r3,r4
        LDRH     r4,[r0,#0x20]
        BICS     r4,r4,r3
        STRH     r4,[r0,#0x20]
        LDRH     r4,[r0,#0x20]
        LSL      r5,r2,r1
        UXTH     r5,r5
        ORRS     r4,r4,r5
        STRH     r4,[r0,#0x20]
        POP      {r4,r5,pc}
        ENDP


        AREA ||i.TIM_CCxNCmd||, CODE, READONLY, ALIGN=1

TIM_CCxNCmd PROC
        PUSH     {r4,r5,lr}
        MOVS     r3,#0
        MOVS     r4,#4
        LSLS     r4,r4,r1
        UXTH     r3,r4
        LDRH     r4,[r0,#0x20]
        BICS     r4,r4,r3
        STRH     r4,[r0,#0x20]
        LDRH     r4,[r0,#0x20]
        LSL      r5,r2,r1
        UXTH     r5,r5
        ORRS     r4,r4,r5
        STRH     r4,[r0,#0x20]
        POP      {r4,r5,pc}
        ENDP


        AREA ||i.TIM_ClearFlag||, CODE, READONLY, ALIGN=1

TIM_ClearFlag PROC
        MVNS     r2,r1
        STRH     r2,[r0,#0x10]
        BX       lr
        ENDP


        AREA ||i.TIM_ClearITPendingBit||, CODE, READONLY, ALIGN=1

TIM_ClearITPendingBit PROC
        MVNS     r2,r1
        STRH     r2,[r0,#0x10]
        BX       lr
        ENDP


        AREA ||i.TIM_ClearOC1Ref||, CODE, READONLY, ALIGN=1

TIM_ClearOC1Ref PROC
        MOV      r2,r1
        MOVS     r1,#0
        LDRH     r1,[r0,#0x18]
        MOV      r3,#0xff7f
        ANDS     r1,r1,r3
        ORRS     r1,r1,r2
        STRH     r1,[r0,#0x18]
        BX       lr
        ENDP


        AREA ||i.TIM_ClearOC2Ref||, CODE, READONLY, ALIGN=1

TIM_ClearOC2Ref PROC
        MOV      r2,r1
        MOVS     r1,#0
        LDRH     r1,[r0,#0x18]
        UBFX     r1,r1,#0,#15
        MOV      r3,#0xffff
        AND      r3,r3,r2,LSL #8
        ORRS     r1,r1,r3
        STRH     r1,[r0,#0x18]
        BX       lr
        ENDP


        AREA ||i.TIM_ClearOC3Ref||, CODE, READONLY, ALIGN=1

TIM_ClearOC3Ref PROC
        MOV      r2,r1
        MOVS     r1,#0
        LDRH     r1,[r0,#0x1c]
        MOV      r3,#0xff7f
        ANDS     r1,r1,r3
        ORRS     r1,r1,r2
        STRH     r1,[r0,#0x1c]
        BX       lr
        ENDP


        AREA ||i.TIM_ClearOC4Ref||, CODE, READONLY, ALIGN=1

TIM_ClearOC4Ref PROC
        MOV      r2,r1
        MOVS     r1,#0
        LDRH     r1,[r0,#0x1c]
        UBFX     r1,r1,#0,#15
        MOV      r3,#0xffff
        AND      r3,r3,r2,LSL #8
        ORRS     r1,r1,r3
        STRH     r1,[r0,#0x1c]
        BX       lr
        ENDP


        AREA ||i.TIM_Cmd||, CODE, READONLY, ALIGN=1

TIM_Cmd PROC
        CBZ      r1,|L16.12|
        LDRH     r2,[r0,#0]
        ORR      r2,r2,#1
        STRH     r2,[r0,#0]
        B        |L16.22|
|L16.12|
        LDRH     r2,[r0,#0]
        MOV      r3,#0xfffe
        ANDS     r2,r2,r3
        STRH     r2,[r0,#0]
|L16.22|
        BX       lr
        ENDP


        AREA ||i.TIM_CounterModeConfig||, CODE, READONLY, ALIGN=1

TIM_CounterModeConfig PROC
        MOV      r2,r1
        MOVS     r1,#0
        LDRH     r1,[r0,#0]
        MOV      r3,#0xff8f
        ANDS     r1,r1,r3
        ORRS     r1,r1,r2
        STRH     r1,[r0,#0]
        BX       lr
        ENDP


        AREA ||i.TIM_CtrlPWMOutputs||, CODE, READONLY, ALIGN=1

TIM_CtrlPWMOutputs PROC
        CBZ      r1,|L18.16|
        LDRH     r2,[r0,#0x44]
        ORR      r2,r2,#0x8000
        STRH     r2,[r0,#0x44]
        B        |L18.28|
|L18.16|
        LDRH     r2,[r0,#0x44]
        UBFX     r2,r2,#0,#15
        STRH     r2,[r0,#0x44]
|L18.28|
        BX       lr
        ENDP


        AREA ||i.TIM_DMACmd||, CODE, READONLY, ALIGN=1

TIM_DMACmd PROC
        CBZ      r2,|L19.10|
        LDRH     r3,[r0,#0xc]
        ORRS     r3,r3,r1
        STRH     r3,[r0,#0xc]
        B        |L19.16|
|L19.10|
        LDRH     r3,[r0,#0xc]
        BICS     r3,r3,r1
        STRH     r3,[r0,#0xc]
|L19.16|
        BX       lr
        ENDP


        AREA ||i.TIM_DMAConfig||, CODE, READONLY, ALIGN=1

TIM_DMAConfig PROC
        ORR      r3,r1,r2
        STRH     r3,[r0,#0x48]
        BX       lr
        ENDP


        AREA ||i.TIM_DeInit||, CODE, READONLY, ALIGN=2

TIM_DeInit PROC
        PUSH     {r4,lr}
        MOV      r4,r0
        LDR      r0,|L21.348|
        CMP      r4,r0
        BNE      |L21.28|
        MOVS     r1,#1
        MOV      r0,r1
        BL       RCC_APB2PeriphResetCmd
        MOVS     r1,#0
        MOVS     r0,#1
        BL       RCC_APB2PeriphResetCmd
        B        |L21.344|
|L21.28|
        CMP      r4,#0x40000000
        BNE      |L21.52|
        MOVS     r1,#1
        MOV      r0,r1
        BL       RCC_APB1PeriphResetCmd
        MOVS     r1,#0
        MOVS     r0,#1
        BL       RCC_APB1PeriphResetCmd
        B        |L21.344|
|L21.52|
        LDR      r0,|L21.352|
        CMP      r4,r0
        BNE      |L21.76|
        MOVS     r1,#1
        MOVS     r0,#2
        BL       RCC_APB1PeriphResetCmd
        MOVS     r1,#0
        MOVS     r0,#2
        BL       RCC_APB1PeriphResetCmd
        B        |L21.344|
|L21.76|
        LDR      r0,|L21.356|
        CMP      r4,r0
        BNE      |L21.100|
        MOVS     r1,#1
        MOVS     r0,#4
        BL       RCC_APB1PeriphResetCmd
        MOVS     r1,#0
        MOVS     r0,#4
        BL       RCC_APB1PeriphResetCmd
        B        |L21.344|
|L21.100|
        LDR      r0,|L21.360|
        CMP      r4,r0
        BNE      |L21.124|
        MOVS     r1,#1
        MOVS     r0,#8
        BL       RCC_APB1PeriphResetCmd
        MOVS     r1,#0
        MOVS     r0,#8
        BL       RCC_APB1PeriphResetCmd
        B        |L21.344|
|L21.124|
        LDR      r0,|L21.364|
        CMP      r4,r0
        BNE      |L21.148|
        MOVS     r1,#1
        MOVS     r0,#0x10
        BL       RCC_APB1PeriphResetCmd
        MOVS     r1,#0
        MOVS     r0,#0x10
        BL       RCC_APB1PeriphResetCmd
        B        |L21.344|
|L21.148|
        LDR      r0,|L21.368|
        CMP      r4,r0
        BNE      |L21.172|
        MOVS     r1,#1
        MOVS     r0,#0x20
        BL       RCC_APB1PeriphResetCmd
        MOVS     r1,#0
        MOVS     r0,#0x20
        BL       RCC_APB1PeriphResetCmd
        B        |L21.344|
|L21.172|
        LDR      r0,|L21.372|
        CMP      r4,r0
        BNE      |L21.196|
        MOVS     r1,#1
        MOVS     r0,#2
        BL       RCC_APB2PeriphResetCmd
        MOVS     r1,#0
        MOVS     r0,#2
        BL       RCC_APB2PeriphResetCmd
        B        |L21.344|
|L21.196|
        LDR      r0,|L21.376|
        CMP      r4,r0
        BNE      |L21.222|
        MOVS     r1,#1
        LSLS     r0,r1,#16
        BL       RCC_APB2PeriphResetCmd
        MOVS     r1,#0
        MOV      r0,#0x10000
        BL       RCC_APB2PeriphResetCmd
        B        |L21.344|
|L21.222|
        LDR      r0,|L21.380|
        CMP      r4,r0
        BNE      |L21.248|
        MOVS     r1,#1
        LSLS     r0,r1,#17
        BL       RCC_APB2PeriphResetCmd
        MOVS     r1,#0
        MOV      r0,#0x20000
        BL       RCC_APB2PeriphResetCmd
        B        |L21.344|
|L21.248|
        LDR      r0,|L21.384|
        CMP      r4,r0
        BNE      |L21.274|
        MOVS     r1,#1
        LSLS     r0,r1,#18
        BL       RCC_APB2PeriphResetCmd
        MOVS     r1,#0
        MOV      r0,#0x40000
        BL       RCC_APB2PeriphResetCmd
        B        |L21.344|
|L21.274|
        LDR      r0,|L21.388|
        CMP      r4,r0
        BNE      |L21.298|
        MOVS     r1,#1
        MOVS     r0,#0x40
        BL       RCC_APB1PeriphResetCmd
        MOVS     r1,#0
        MOVS     r0,#0x40
        BL       RCC_APB1PeriphResetCmd
        B        |L21.344|
|L21.298|
        LDR      r0,|L21.392|
        CMP      r4,r0
        BNE      |L21.322|
        MOVS     r1,#1
        MOVS     r0,#0x80
        BL       RCC_APB1PeriphResetCmd
        MOVS     r1,#0
        MOVS     r0,#0x80
        BL       RCC_APB1PeriphResetCmd
        B        |L21.344|
|L21.322|
        LDR      r0,|L21.396|
        CMP      r4,r0
        BNE      |L21.344|
        MOVS     r1,#1
        ASRS     r0,r0,#22
        BL       RCC_APB1PeriphResetCmd
        MOVS     r1,#0
        ASRS     r0,r4,#22
        BL       RCC_APB1PeriphResetCmd
|L21.344|
        POP      {r4,pc}
        ENDP

        DCW      0x0000
|L21.348|
        DCD      0x40010000
|L21.352|
        DCD      0x40000400
|L21.356|
        DCD      0x40000800
|L21.360|
        DCD      0x40000c00
|L21.364|
        DCD      0x40001000
|L21.368|
        DCD      0x40001400
|L21.372|
        DCD      0x40010400
|L21.376|
        DCD      0x40014000
|L21.380|
        DCD      0x40014400
|L21.384|
        DCD      0x40014800
|L21.388|
        DCD      0x40001800
|L21.392|
        DCD      0x40001c00
|L21.396|
        DCD      0x40002000

        AREA ||i.TIM_ETRClockMode1Config||, CODE, READONLY, ALIGN=1

TIM_ETRClockMode1Config PROC
        PUSH     {r4-r8,lr}
        MOV      r5,r0
        MOV      r6,r1
        MOV      r7,r2
        MOV      r8,r3
        MOVS     r4,#0
        MOV      r3,r8
        MOV      r2,r7
        MOV      r1,r6
        MOV      r0,r5
        BL       TIM_ETRConfig
        LDRH     r4,[r5,#8]
        MOV      r0,#0xfff8
        ANDS     r4,r4,r0
        ORR      r4,r4,#7
        MOV      r0,#0xff8f
        ANDS     r4,r4,r0
        ORR      r4,r4,#0x70
        STRH     r4,[r5,#8]
        POP      {r4-r8,pc}
        ENDP


        AREA ||i.TIM_ETRClockMode2Config||, CODE, READONLY, ALIGN=1

TIM_ETRClockMode2Config PROC
        PUSH     {r4-r7,lr}
        MOV      r4,r0
        MOV      r5,r1
        MOV      r6,r2
        MOV      r7,r3
        MOV      r3,r7
        MOV      r2,r6
        MOV      r1,r5
        MOV      r0,r4
        BL       TIM_ETRConfig
        LDRH     r0,[r4,#8]
        ORR      r0,r0,#0x4000
        STRH     r0,[r4,#8]
        POP      {r4-r7,pc}
        ENDP


        AREA ||i.TIM_ETRConfig||, CODE, READONLY, ALIGN=1

TIM_ETRConfig PROC
        PUSH     {r4,r5,lr}
        MOV      r4,r1
        MOVS     r1,#0
        LDRH     r1,[r0,#8]
        UXTB     r1,r1
        MOV      r5,#0xffff
        AND      r5,r5,r3,LSL #8
        ORRS     r5,r5,r2
        ORRS     r5,r5,r4
        ORRS     r1,r1,r5
        STRH     r1,[r0,#8]
        POP      {r4,r5,pc}
        ENDP


        AREA ||i.TIM_EncoderInterfaceConfig||, CODE, READONLY, ALIGN=1

TIM_EncoderInterfaceConfig PROC
        PUSH     {r4-r7,lr}
        MOV      r4,r1
        MOV      r5,r2
        MOV      r6,r3
        MOVS     r1,#0
        MOVS     r2,#0
        MOVS     r3,#0
        LDRH     r1,[r0,#8]
        LDRH     r2,[r0,#0x18]
        LDRH     r3,[r0,#0x20]
        MOV      r7,#0xfff8
        ANDS     r1,r1,r7
        ORRS     r1,r1,r4
        MOV      r7,#0xfcfc
        ANDS     r2,r2,r7
        MOV      r7,#0x101
        ORRS     r2,r2,r7
        MOV      r7,#0xffdd
        ANDS     r3,r3,r7
        MOV      r7,#0xffff
        AND      r7,r7,r6,LSL #4
        ORRS     r7,r7,r5
        ORRS     r3,r3,r7
        STRH     r1,[r0,#8]
        STRH     r2,[r0,#0x18]
        STRH     r3,[r0,#0x20]
        POP      {r4-r7,pc}
        ENDP


        AREA ||i.TIM_ForcedOC1Config||, CODE, READONLY, ALIGN=1

TIM_ForcedOC1Config PROC
        MOV      r2,r1
        MOVS     r1,#0
        LDRH     r1,[r0,#0x18]
        MOV      r3,#0xff8f
        ANDS     r1,r1,r3
        ORRS     r1,r1,r2
        STRH     r1,[r0,#0x18]
        BX       lr
        ENDP


        AREA ||i.TIM_ForcedOC2Config||, CODE, READONLY, ALIGN=1

TIM_ForcedOC2Config PROC
        MOV      r2,r1
        MOVS     r1,#0
        LDRH     r1,[r0,#0x18]
        MOV      r3,#0x8fff
        ANDS     r1,r1,r3
        MOV      r3,#0xffff
        AND      r3,r3,r2,LSL #8
        ORRS     r1,r1,r3
        STRH     r1,[r0,#0x18]
        BX       lr
        ENDP


        AREA ||i.TIM_ForcedOC3Config||, CODE, READONLY, ALIGN=1

TIM_ForcedOC3Config PROC
        MOV      r2,r1
        MOVS     r1,#0
        LDRH     r1,[r0,#0x1c]
        MOV      r3,#0xff8f
        ANDS     r1,r1,r3
        ORRS     r1,r1,r2
        STRH     r1,[r0,#0x1c]
        BX       lr
        ENDP


        AREA ||i.TIM_ForcedOC4Config||, CODE, READONLY, ALIGN=1

TIM_ForcedOC4Config PROC
        MOV      r2,r1
        MOVS     r1,#0
        LDRH     r1,[r0,#0x1c]
        MOV      r3,#0x8fff
        ANDS     r1,r1,r3
        MOV      r3,#0xffff
        AND      r3,r3,r2,LSL #8
        ORRS     r1,r1,r3
        STRH     r1,[r0,#0x1c]
        BX       lr
        ENDP


        AREA ||i.TIM_GenerateEvent||, CODE, READONLY, ALIGN=1

TIM_GenerateEvent PROC
        STRH     r1,[r0,#0x14]
        BX       lr
        ENDP


        AREA ||i.TIM_GetCapture1||, CODE, READONLY, ALIGN=1

TIM_GetCapture1 PROC
        MOV      r1,r0
        LDR      r0,[r1,#0x34]
        BX       lr
        ENDP


        AREA ||i.TIM_GetCapture2||, CODE, READONLY, ALIGN=1

TIM_GetCapture2 PROC
        MOV      r1,r0
        LDR      r0,[r1,#0x38]
        BX       lr
        ENDP


        AREA ||i.TIM_GetCapture3||, CODE, READONLY, ALIGN=1

TIM_GetCapture3 PROC
        MOV      r1,r0
        LDR      r0,[r1,#0x3c]
        BX       lr
        ENDP


        AREA ||i.TIM_GetCapture4||, CODE, READONLY, ALIGN=1

TIM_GetCapture4 PROC
        MOV      r1,r0
        LDR      r0,[r1,#0x40]
        BX       lr
        ENDP


        AREA ||i.TIM_GetCounter||, CODE, READONLY, ALIGN=1

TIM_GetCounter PROC
        MOV      r1,r0
        LDR      r0,[r1,#0x24]
        BX       lr
        ENDP


        AREA ||i.TIM_GetFlagStatus||, CODE, READONLY, ALIGN=1

TIM_GetFlagStatus PROC
        MOV      r2,r0
        MOVS     r0,#0
        LDRH     r3,[r2,#0x10]
        ANDS     r3,r3,r1
        CBZ      r3,|L36.14|
        MOVS     r0,#1
        B        |L36.16|
|L36.14|
        MOVS     r0,#0
|L36.16|
        BX       lr
        ENDP


        AREA ||i.TIM_GetITStatus||, CODE, READONLY, ALIGN=1

TIM_GetITStatus PROC
        PUSH     {r4,r5,lr}
        MOV      r2,r0
        MOVS     r0,#0
        MOVS     r3,#0
        MOVS     r4,#0
        LDRH     r5,[r2,#0x10]
        AND      r3,r5,r1
        LDRH     r5,[r2,#0xc]
        AND      r4,r5,r1
        CBZ      r3,|L37.30|
        CBZ      r4,|L37.30|
        MOVS     r0,#1
        B        |L37.32|
|L37.30|
        MOVS     r0,#0
|L37.32|
        POP      {r4,r5,pc}
        ENDP


        AREA ||i.TIM_GetPrescaler||, CODE, READONLY, ALIGN=1

TIM_GetPrescaler PROC
        MOV      r1,r0
        LDRH     r0,[r1,#0x28]
        BX       lr
        ENDP


        AREA ||i.TIM_ICInit||, CODE, READONLY, ALIGN=1

TIM_ICInit PROC
        PUSH     {r4-r6,lr}
        MOV      r5,r0
        MOV      r4,r1
        LDRH     r0,[r4,#0]
        CBNZ     r0,|L39.32|
        LDRH     r3,[r4,#8]
        LDRH     r2,[r4,#4]
        LDRH     r1,[r4,#2]
        MOV      r0,r5
        BL       TI1_Config
        LDRH     r1,[r4,#6]
        MOV      r0,r5
        BL       TIM_SetIC1Prescaler
        B        |L39.108|
|L39.32|
        LDRH     r0,[r4,#0]
        CMP      r0,#4
        BNE      |L39.60|
        LDRH     r3,[r4,#8]
        LDRH     r2,[r4,#4]
        LDRH     r1,[r4,#2]
        MOV      r0,r5
        BL       TI2_Config
        LDRH     r1,[r4,#6]
        MOV      r0,r5
        BL       TIM_SetIC2Prescaler
        B        |L39.108|
|L39.60|
        LDRH     r0,[r4,#0]
        CMP      r0,#8
        BNE      |L39.88|
        LDRH     r3,[r4,#8]
        LDRH     r2,[r4,#4]
        LDRH     r1,[r4,#2]
        MOV      r0,r5
        BL       TI3_Config
        LDRH     r1,[r4,#6]
        MOV      r0,r5
        BL       TIM_SetIC3Prescaler
        B        |L39.108|
|L39.88|
        LDRH     r3,[r4,#8]
        LDRH     r2,[r4,#4]
        LDRH     r1,[r4,#2]
        MOV      r0,r5
        BL       TI4_Config
        LDRH     r1,[r4,#6]
        MOV      r0,r5
        BL       TIM_SetIC4Prescaler
|L39.108|
        POP      {r4-r6,pc}
        ENDP


        AREA ||i.TIM_ICStructInit||, CODE, READONLY, ALIGN=1

TIM_ICStructInit PROC
        MOVS     r1,#0
        STRH     r1,[r0,#0]
        STRH     r1,[r0,#2]
        MOVS     r1,#1
        STRH     r1,[r0,#4]
        MOVS     r1,#0
        STRH     r1,[r0,#6]
        STRH     r1,[r0,#8]
        BX       lr
        ENDP


        AREA ||i.TIM_ITConfig||, CODE, READONLY, ALIGN=1

TIM_ITConfig PROC
        CBZ      r2,|L41.10|
        LDRH     r3,[r0,#0xc]
        ORRS     r3,r3,r1
        STRH     r3,[r0,#0xc]
        B        |L41.16|
|L41.10|
        LDRH     r3,[r0,#0xc]
        BICS     r3,r3,r1
        STRH     r3,[r0,#0xc]
|L41.16|
        BX       lr
        ENDP


        AREA ||i.TIM_ITRxExternalClockConfig||, CODE, READONLY, ALIGN=1

TIM_ITRxExternalClockConfig PROC
        PUSH     {r4,r5,lr}
        MOV      r4,r0
        MOV      r5,r1
        MOV      r1,r5
        MOV      r0,r4
        BL       TIM_SelectInputTrigger
        LDRH     r0,[r4,#8]
        ORR      r0,r0,#7
        STRH     r0,[r4,#8]
        POP      {r4,r5,pc}
        ENDP


        AREA ||i.TIM_InternalClockConfig||, CODE, READONLY, ALIGN=1

TIM_InternalClockConfig PROC
        LDRH     r1,[r0,#8]
        MOV      r2,#0xfff8
        ANDS     r1,r1,r2
        STRH     r1,[r0,#8]
        BX       lr
        ENDP


        AREA ||i.TIM_OC1FastConfig||, CODE, READONLY, ALIGN=1

TIM_OC1FastConfig PROC
        MOV      r2,r1
        MOVS     r1,#0
        LDRH     r1,[r0,#0x18]
        MOV      r3,#0xfffb
        ANDS     r1,r1,r3
        ORRS     r1,r1,r2
        STRH     r1,[r0,#0x18]
        BX       lr
        ENDP


        AREA ||i.TIM_OC1Init||, CODE, READONLY, ALIGN=2

TIM_OC1Init PROC
        PUSH     {r4-r6,lr}
        MOVS     r4,#0
        MOVS     r2,#0
        MOVS     r3,#0
        LDRH     r5,[r0,#0x20]
        MOV      r6,#0xfffe
        ANDS     r5,r5,r6
        STRH     r5,[r0,#0x20]
        LDRH     r2,[r0,#0x20]
        LDRH     r3,[r0,#4]
        LDRH     r4,[r0,#0x18]
        MOV      r5,#0xff8f
        ANDS     r4,r4,r5
        SUBS     r5,r6,#2
        ANDS     r4,r4,r5
        LDRH     r5,[r1,#0]
        ORRS     r4,r4,r5
        SUBS     r5,r6,#1
        ANDS     r2,r2,r5
        LDRH     r5,[r1,#0xc]
        ORRS     r2,r2,r5
        LDRH     r5,[r1,#2]
        ORRS     r2,r2,r5
        LDR      r5,|L45.116|
        CMP      r0,r5
        BEQ      |L45.62|
        LDR      r5,|L45.120|
        CMP      r0,r5
        BNE      |L45.102|
|L45.62|
        MOV      r5,#0xfff7
        ANDS     r2,r2,r5
        LDRH     r5,[r1,#0xe]
        ORRS     r2,r2,r5
        MOV      r5,#0xfffb
        ANDS     r2,r2,r5
        LDRH     r5,[r1,#4]
        ORRS     r2,r2,r5
        MOV      r5,#0xfeff
        ANDS     r3,r3,r5
        MOV      r5,#0xfdff
        ANDS     r3,r3,r5
        LDRH     r5,[r1,#0x10]
        ORRS     r3,r3,r5
        LDRH     r5,[r1,#0x12]
        ORRS     r3,r3,r5
|L45.102|
        STRH     r3,[r0,#4]
        STRH     r4,[r0,#0x18]
        LDR      r5,[r1,#8]
        STR      r5,[r0,#0x34]
        STRH     r2,[r0,#0x20]
        POP      {r4-r6,pc}
        ENDP

        DCW      0x0000
|L45.116|
        DCD      0x40010000
|L45.120|
        DCD      0x40010400

        AREA ||i.TIM_OC1NPolarityConfig||, CODE, READONLY, ALIGN=1

TIM_OC1NPolarityConfig PROC
        MOV      r2,r1
        MOVS     r1,#0
        LDRH     r1,[r0,#0x20]
        MOV      r3,#0xfff7
        ANDS     r1,r1,r3
        ORRS     r1,r1,r2
        STRH     r1,[r0,#0x20]
        BX       lr
        ENDP


        AREA ||i.TIM_OC1PolarityConfig||, CODE, READONLY, ALIGN=1

TIM_OC1PolarityConfig PROC
        MOV      r2,r1
        MOVS     r1,#0
        LDRH     r1,[r0,#0x20]
        MOV      r3,#0xfffd
        ANDS     r1,r1,r3
        ORRS     r1,r1,r2
        STRH     r1,[r0,#0x20]
        BX       lr
        ENDP


        AREA ||i.TIM_OC1PreloadConfig||, CODE, READONLY, ALIGN=1

TIM_OC1PreloadConfig PROC
        MOV      r2,r1
        MOVS     r1,#0
        LDRH     r1,[r0,#0x18]
        MOV      r3,#0xfff7
        ANDS     r1,r1,r3
        ORRS     r1,r1,r2
        STRH     r1,[r0,#0x18]
        BX       lr
        ENDP


        AREA ||i.TIM_OC2FastConfig||, CODE, READONLY, ALIGN=1

TIM_OC2FastConfig PROC
        MOV      r2,r1
        MOVS     r1,#0
        LDRH     r1,[r0,#0x18]
        MOV      r3,#0xfbff
        ANDS     r1,r1,r3
        MOV      r3,#0xffff
        AND      r3,r3,r2,LSL #8
        ORRS     r1,r1,r3
        STRH     r1,[r0,#0x18]
        BX       lr
        ENDP


        AREA ||i.TIM_OC2Init||, CODE, READONLY, ALIGN=2

TIM_OC2Init PROC
        PUSH     {r4-r6,lr}
        MOVS     r4,#0
        MOVS     r2,#0
        MOVS     r3,#0
        LDRH     r5,[r0,#0x20]
        MOV      r6,#0xffef
        ANDS     r5,r5,r6
        STRH     r5,[r0,#0x20]
        LDRH     r2,[r0,#0x20]
        LDRH     r3,[r0,#4]
        LDRH     r4,[r0,#0x18]
        MOV      r5,#0x8fff
        ANDS     r4,r4,r5
        MOV      r5,#0xfcff
        ANDS     r4,r4,r5
        LDRH     r5,[r1,#0]
        MOV      r6,#0xffff
        AND      r5,r6,r5,LSL #8
        ORRS     r4,r4,r5
        MOV      r5,#0xffdf
        ANDS     r2,r2,r5
        LDRH     r5,[r1,#0xc]
        AND      r5,r6,r5,LSL #4
        ORRS     r2,r2,r5
        LDRH     r5,[r1,#2]
        AND      r5,r6,r5,LSL #4
        ORRS     r2,r2,r5
        LDR      r5,|L50.156|
        CMP      r0,r5
        BEQ      |L50.82|
        LDR      r5,|L50.160|
        CMP      r0,r5
        BNE      |L50.142|
|L50.82|
        MOV      r5,#0xff7f
        ANDS     r2,r2,r5
        LDRH     r5,[r1,#0xe]
        MOV      r6,#0xffff
        AND      r5,r6,r5,LSL #4
        ORRS     r2,r2,r5
        MOV      r5,#0xffbf
        ANDS     r2,r2,r5
        LDRH     r5,[r1,#4]
        AND      r5,r6,r5,LSL #4
        ORRS     r2,r2,r5
        MOV      r5,#0xfbff
        ANDS     r3,r3,r5
        MOV      r5,#0xf7ff
        ANDS     r3,r3,r5
        LDRH     r5,[r1,#0x10]
        AND      r5,r6,r5,LSL #2
        ORRS     r3,r3,r5
        LDRH     r5,[r1,#0x12]
        AND      r5,r6,r5,LSL #2
        ORRS     r3,r3,r5
|L50.142|
        STRH     r3,[r0,#4]
        STRH     r4,[r0,#0x18]
        LDR      r5,[r1,#8]
        STR      r5,[r0,#0x38]
        STRH     r2,[r0,#0x20]
        POP      {r4-r6,pc}
        ENDP

        DCW      0x0000
|L50.156|
        DCD      0x40010000
|L50.160|
        DCD      0x40010400

        AREA ||i.TIM_OC2NPolarityConfig||, CODE, READONLY, ALIGN=1

TIM_OC2NPolarityConfig PROC
        MOV      r2,r1
        MOVS     r1,#0
        LDRH     r1,[r0,#0x20]
        MOV      r3,#0xff7f
        ANDS     r1,r1,r3
        MOV      r3,#0xffff
        AND      r3,r3,r2,LSL #4
        ORRS     r1,r1,r3
        STRH     r1,[r0,#0x20]
        BX       lr
        ENDP


        AREA ||i.TIM_OC2PolarityConfig||, CODE, READONLY, ALIGN=1

TIM_OC2PolarityConfig PROC
        MOV      r2,r1
        MOVS     r1,#0
        LDRH     r1,[r0,#0x20]
        MOV      r3,#0xffdf
        ANDS     r1,r1,r3
        MOV      r3,#0xffff
        AND      r3,r3,r2,LSL #4
        ORRS     r1,r1,r3
        STRH     r1,[r0,#0x20]
        BX       lr
        ENDP


        AREA ||i.TIM_OC2PreloadConfig||, CODE, READONLY, ALIGN=1

TIM_OC2PreloadConfig PROC
        MOV      r2,r1
        MOVS     r1,#0
        LDRH     r1,[r0,#0x18]
        MOV      r3,#0xf7ff
        ANDS     r1,r1,r3
        MOV      r3,#0xffff
        AND      r3,r3,r2,LSL #8
        ORRS     r1,r1,r3
        STRH     r1,[r0,#0x18]
        BX       lr
        ENDP


        AREA ||i.TIM_OC3FastConfig||, CODE, READONLY, ALIGN=1

TIM_OC3FastConfig PROC
        MOV      r2,r1
        MOVS     r1,#0
        LDRH     r1,[r0,#0x1c]
        MOV      r3,#0xfffb
        ANDS     r1,r1,r3
        ORRS     r1,r1,r2
        STRH     r1,[r0,#0x1c]
        BX       lr
        ENDP


        AREA ||i.TIM_OC3Init||, CODE, READONLY, ALIGN=2

TIM_OC3Init PROC
        PUSH     {r4-r6,lr}
        MOVS     r4,#0
        MOVS     r2,#0
        MOVS     r3,#0
        LDRH     r5,[r0,#0x20]
        MOV      r6,#0xfeff
        ANDS     r5,r5,r6
        STRH     r5,[r0,#0x20]
        LDRH     r2,[r0,#0x20]
        LDRH     r3,[r0,#4]
        LDRH     r4,[r0,#0x1c]
        MOV      r5,#0xff8f
        ANDS     r4,r4,r5
        MOV      r5,#0xfffc
        ANDS     r4,r4,r5
        LDRH     r5,[r1,#0]
        ORRS     r4,r4,r5
        MOV      r5,#0xfdff
        ANDS     r2,r2,r5
        LDRH     r5,[r1,#0xc]
        MOV      r6,#0xffff
        AND      r5,r6,r5,LSL #8
        ORRS     r2,r2,r5
        LDRH     r5,[r1,#2]
        AND      r5,r6,r5,LSL #8
        ORRS     r2,r2,r5
        LDR      r5,|L55.152|
        CMP      r0,r5
        BEQ      |L55.78|
        LDR      r5,|L55.156|
        CMP      r0,r5
        BNE      |L55.138|
|L55.78|
        MOV      r5,#0xf7ff
        ANDS     r2,r2,r5
        LDRH     r5,[r1,#0xe]
        MOV      r6,#0xffff
        AND      r5,r6,r5,LSL #8
        ORRS     r2,r2,r5
        MOV      r5,#0xfbff
        ANDS     r2,r2,r5
        LDRH     r5,[r1,#4]
        AND      r5,r6,r5,LSL #8
        ORRS     r2,r2,r5
        MOV      r5,#0xefff
        ANDS     r3,r3,r5
        MOV      r5,#0xdfff
        ANDS     r3,r3,r5
        LDRH     r5,[r1,#0x10]
        AND      r5,r6,r5,LSL #4
        ORRS     r3,r3,r5
        LDRH     r5,[r1,#0x12]
        AND      r5,r6,r5,LSL #4
        ORRS     r3,r3,r5
|L55.138|
        STRH     r3,[r0,#4]
        STRH     r4,[r0,#0x1c]
        LDR      r5,[r1,#8]
        STR      r5,[r0,#0x3c]
        STRH     r2,[r0,#0x20]
        POP      {r4-r6,pc}
        ENDP

        DCW      0x0000
|L55.152|
        DCD      0x40010000
|L55.156|
        DCD      0x40010400

        AREA ||i.TIM_OC3NPolarityConfig||, CODE, READONLY, ALIGN=1

TIM_OC3NPolarityConfig PROC
        MOV      r2,r1
        MOVS     r1,#0
        LDRH     r1,[r0,#0x20]
        MOV      r3,#0xf7ff
        ANDS     r1,r1,r3
        MOV      r3,#0xffff
        AND      r3,r3,r2,LSL #8
        ORRS     r1,r1,r3
        STRH     r1,[r0,#0x20]
        BX       lr
        ENDP


        AREA ||i.TIM_OC3PolarityConfig||, CODE, READONLY, ALIGN=1

TIM_OC3PolarityConfig PROC
        MOV      r2,r1
        MOVS     r1,#0
        LDRH     r1,[r0,#0x20]
        MOV      r3,#0xfdff
        ANDS     r1,r1,r3
        MOV      r3,#0xffff
        AND      r3,r3,r2,LSL #8
        ORRS     r1,r1,r3
        STRH     r1,[r0,#0x20]
        BX       lr
        ENDP


        AREA ||i.TIM_OC3PreloadConfig||, CODE, READONLY, ALIGN=1

TIM_OC3PreloadConfig PROC
        MOV      r2,r1
        MOVS     r1,#0
        LDRH     r1,[r0,#0x1c]
        MOV      r3,#0xfff7
        ANDS     r1,r1,r3
        ORRS     r1,r1,r2
        STRH     r1,[r0,#0x1c]
        BX       lr
        ENDP


        AREA ||i.TIM_OC4FastConfig||, CODE, READONLY, ALIGN=1

TIM_OC4FastConfig PROC
        MOV      r2,r1
        MOVS     r1,#0
        LDRH     r1,[r0,#0x1c]
        MOV      r3,#0xfbff
        ANDS     r1,r1,r3
        MOV      r3,#0xffff
        AND      r3,r3,r2,LSL #8
        ORRS     r1,r1,r3
        STRH     r1,[r0,#0x1c]
        BX       lr
        ENDP


        AREA ||i.TIM_OC4Init||, CODE, READONLY, ALIGN=2

TIM_OC4Init PROC
        PUSH     {r4-r6,lr}
        MOVS     r2,#0
        MOVS     r3,#0
        MOVS     r4,#0
        LDRH     r5,[r0,#0x20]
        MOV      r6,#0xefff
        ANDS     r5,r5,r6
        STRH     r5,[r0,#0x20]
        LDRH     r3,[r0,#0x20]
        LDRH     r4,[r0,#4]
        LDRH     r2,[r0,#0x1c]
        MOV      r5,#0x8fff
        ANDS     r2,r2,r5
        MOV      r5,#0xfcff
        ANDS     r2,r2,r5
        LDRH     r5,[r1,#0]
        MOV      r6,#0xffff
        AND      r5,r6,r5,LSL #8
        ORRS     r2,r2,r5
        MOV      r5,#0xdfff
        ANDS     r3,r3,r5
        LDRH     r5,[r1,#0xc]
        AND      r5,r6,r5,LSL #12
        ORRS     r3,r3,r5
        LDRH     r5,[r1,#2]
        AND      r5,r6,r5,LSL #12
        ORRS     r3,r3,r5
        LDR      r5,|L60.112|
        CMP      r0,r5
        BEQ      |L60.82|
        LDR      r5,|L60.116|
        CMP      r0,r5
        BNE      |L60.100|
|L60.82|
        MOV      r5,#0xbfff
        ANDS     r4,r4,r5
        LDRH     r5,[r1,#0x10]
        MOV      r6,#0xffff
        AND      r5,r6,r5,LSL #6
        ORRS     r4,r4,r5
|L60.100|
        STRH     r4,[r0,#4]
        STRH     r2,[r0,#0x1c]
        LDR      r5,[r1,#8]
        STR      r5,[r0,#0x40]
        STRH     r3,[r0,#0x20]
        POP      {r4-r6,pc}
        ENDP

|L60.112|
        DCD      0x40010000
|L60.116|
        DCD      0x40010400

        AREA ||i.TIM_OC4PolarityConfig||, CODE, READONLY, ALIGN=1

TIM_OC4PolarityConfig PROC
        MOV      r2,r1
        MOVS     r1,#0
        LDRH     r1,[r0,#0x20]
        MOV      r3,#0xdfff
        ANDS     r1,r1,r3
        MOV      r3,#0xffff
        AND      r3,r3,r2,LSL #12
        ORRS     r1,r1,r3
        STRH     r1,[r0,#0x20]
        BX       lr
        ENDP


        AREA ||i.TIM_OC4PreloadConfig||, CODE, READONLY, ALIGN=1

TIM_OC4PreloadConfig PROC
        MOV      r2,r1
        MOVS     r1,#0
        LDRH     r1,[r0,#0x1c]
        MOV      r3,#0xf7ff
        ANDS     r1,r1,r3
        MOV      r3,#0xffff
        AND      r3,r3,r2,LSL #8
        ORRS     r1,r1,r3
        STRH     r1,[r0,#0x1c]
        BX       lr
        ENDP


        AREA ||i.TIM_OCStructInit||, CODE, READONLY, ALIGN=1

TIM_OCStructInit PROC
        MOVS     r1,#0
        STRH     r1,[r0,#0]
        STRH     r1,[r0,#2]
        STRH     r1,[r0,#4]
        STR      r1,[r0,#8]
        STRH     r1,[r0,#0xc]
        STRH     r1,[r0,#0xe]
        STRH     r1,[r0,#0x10]
        STRH     r1,[r0,#0x12]
        BX       lr
        ENDP


        AREA ||i.TIM_PWMIConfig||, CODE, READONLY, ALIGN=1

TIM_PWMIConfig PROC
        PUSH     {r4-r8,lr}
        MOV      r5,r0
        MOV      r4,r1
        MOVS     r6,#0
        MOVS     r7,#1
        LDRH     r0,[r4,#2]
        CBNZ     r0,|L64.20|
        MOVS     r6,#2
        B        |L64.22|
|L64.20|
        MOVS     r6,#0
|L64.22|
        LDRH     r0,[r4,#4]
        CMP      r0,#1
        BNE      |L64.32|
        MOVS     r7,#2
        B        |L64.34|
|L64.32|
        MOVS     r7,#1
|L64.34|
        LDRH     r0,[r4,#0]
        CBNZ     r0,|L64.80|
        LDRH     r3,[r4,#8]
        LDRH     r2,[r4,#4]
        LDRH     r1,[r4,#2]
        MOV      r0,r5
        BL       TI1_Config
        LDRH     r1,[r4,#6]
        MOV      r0,r5
        BL       TIM_SetIC1Prescaler
        LDRH     r3,[r4,#8]
        MOV      r2,r7
        MOV      r1,r6
        MOV      r0,r5
        BL       TI2_Config
        LDRH     r1,[r4,#6]
        MOV      r0,r5
        BL       TIM_SetIC2Prescaler
        B        |L64.120|
|L64.80|
        LDRH     r3,[r4,#8]
        LDRH     r2,[r4,#4]
        LDRH     r1,[r4,#2]
        MOV      r0,r5
        BL       TI2_Config
        LDRH     r1,[r4,#6]
        MOV      r0,r5
        BL       TIM_SetIC2Prescaler
        LDRH     r3,[r4,#8]
        MOV      r2,r7
        MOV      r1,r6
        MOV      r0,r5
        BL       TI1_Config
        LDRH     r1,[r4,#6]
        MOV      r0,r5
        BL       TIM_SetIC1Prescaler
|L64.120|
        POP      {r4-r8,pc}
        ENDP


        AREA ||i.TIM_PrescalerConfig||, CODE, READONLY, ALIGN=1

TIM_PrescalerConfig PROC
        STRH     r1,[r0,#0x28]
        STRH     r2,[r0,#0x14]
        BX       lr
        ENDP


        AREA ||i.TIM_RemapConfig||, CODE, READONLY, ALIGN=1

TIM_RemapConfig PROC
        STRH     r1,[r0,#0x50]
        BX       lr
        ENDP


        AREA ||i.TIM_SelectCCDMA||, CODE, READONLY, ALIGN=1

TIM_SelectCCDMA PROC
        CBZ      r1,|L67.12|
        LDRH     r2,[r0,#4]
        ORR      r2,r2,#8
        STRH     r2,[r0,#4]
        B        |L67.22|
|L67.12|
        LDRH     r2,[r0,#4]
        MOV      r3,#0xfff7
        ANDS     r2,r2,r3
        STRH     r2,[r0,#4]
|L67.22|
        BX       lr
        ENDP


        AREA ||i.TIM_SelectCOM||, CODE, READONLY, ALIGN=1

TIM_SelectCOM PROC
        CBZ      r1,|L68.12|
        LDRH     r2,[r0,#4]
        ORR      r2,r2,#4
        STRH     r2,[r0,#4]
        B        |L68.22|
|L68.12|
        LDRH     r2,[r0,#4]
        MOV      r3,#0xfffb
        ANDS     r2,r2,r3
        STRH     r2,[r0,#4]
|L68.22|
        BX       lr
        ENDP


        AREA ||i.TIM_SelectHallSensor||, CODE, READONLY, ALIGN=1

TIM_SelectHallSensor PROC
        CBZ      r1,|L69.12|
        LDRH     r2,[r0,#4]
        ORR      r2,r2,#0x80
        STRH     r2,[r0,#4]
        B        |L69.22|
|L69.12|
        LDRH     r2,[r0,#4]
        MOV      r3,#0xff7f
        ANDS     r2,r2,r3
        STRH     r2,[r0,#4]
|L69.22|
        BX       lr
        ENDP


        AREA ||i.TIM_SelectInputTrigger||, CODE, READONLY, ALIGN=1

TIM_SelectInputTrigger PROC
        MOV      r2,r1
        MOVS     r1,#0
        LDRH     r1,[r0,#8]
        MOV      r3,#0xff8f
        ANDS     r1,r1,r3
        ORRS     r1,r1,r2
        STRH     r1,[r0,#8]
        BX       lr
        ENDP


        AREA ||i.TIM_SelectMasterSlaveMode||, CODE, READONLY, ALIGN=1

TIM_SelectMasterSlaveMode PROC
        LDRH     r2,[r0,#8]
        MOV      r3,#0xff7f
        ANDS     r2,r2,r3
        STRH     r2,[r0,#8]
        LDRH     r2,[r0,#8]
        ORRS     r2,r2,r1
        STRH     r2,[r0,#8]
        BX       lr
        ENDP


        AREA ||i.TIM_SelectOCxM||, CODE, READONLY, ALIGN=1

TIM_SelectOCxM PROC
        PUSH     {r4-r6,lr}
        MOV      r3,r0
        MOVS     r0,#0
        MOVS     r4,#0
        MOV      r0,r3
        ADDS     r0,r0,#0x18
        MOVS     r5,#1
        LSLS     r5,r5,r1
        UXTH     r4,r5
        LDRH     r5,[r3,#0x20]
        BICS     r5,r5,r4
        STRH     r5,[r3,#0x20]
        CBZ      r1,|L72.30|
        CMP      r1,#8
        BNE      |L72.52|
|L72.30|
        ADD      r0,r0,r1,ASR #1
        LDR      r5,[r0,#0]
        MOV      r6,#0xff8f
        ANDS     r5,r5,r6
        STR      r5,[r0,#0]
        LDR      r5,[r0,#0]
        ORRS     r5,r5,r2
        STR      r5,[r0,#0]
        B        |L72.84|
|L72.52|
        SUBS     r5,r1,#4
        UBFX     r5,r5,#1,#15
        ADD      r0,r0,r5
        LDR      r5,[r0,#0]
        MOV      r6,#0x8fff
        ANDS     r5,r5,r6
        STR      r5,[r0,#0]
        LDR      r5,[r0,#0]
        MOV      r6,#0xffff
        AND      r6,r6,r2,LSL #8
        ORRS     r5,r5,r6
        STR      r5,[r0,#0]
|L72.84|
        POP      {r4-r6,pc}
        ENDP


        AREA ||i.TIM_SelectOnePulseMode||, CODE, READONLY, ALIGN=1

TIM_SelectOnePulseMode PROC
        LDRH     r2,[r0,#0]
        MOV      r3,#0xfff7
        ANDS     r2,r2,r3
        STRH     r2,[r0,#0]
        LDRH     r2,[r0,#0]
        ORRS     r2,r2,r1
        STRH     r2,[r0,#0]
        BX       lr
        ENDP


        AREA ||i.TIM_SelectOutputTrigger||, CODE, READONLY, ALIGN=1

TIM_SelectOutputTrigger PROC
        LDRH     r2,[r0,#4]
        MOV      r3,#0xff8f
        ANDS     r2,r2,r3
        STRH     r2,[r0,#4]
        LDRH     r2,[r0,#4]
        ORRS     r2,r2,r1
        STRH     r2,[r0,#4]
        BX       lr
        ENDP


        AREA ||i.TIM_SelectSlaveMode||, CODE, READONLY, ALIGN=1

TIM_SelectSlaveMode PROC
        LDRH     r2,[r0,#8]
        MOV      r3,#0xfff8
        ANDS     r2,r2,r3
        STRH     r2,[r0,#8]
        LDRH     r2,[r0,#8]
        ORRS     r2,r2,r1
        STRH     r2,[r0,#8]
        BX       lr
        ENDP


        AREA ||i.TIM_SetAutoreload||, CODE, READONLY, ALIGN=1

TIM_SetAutoreload PROC
        STR      r1,[r0,#0x2c]
        BX       lr
        ENDP


        AREA ||i.TIM_SetClockDivision||, CODE, READONLY, ALIGN=1

TIM_SetClockDivision PROC
        LDRH     r2,[r0,#0]
        MOV      r3,#0xfcff
        ANDS     r2,r2,r3
        STRH     r2,[r0,#0]
        LDRH     r2,[r0,#0]
        ORRS     r2,r2,r1
        STRH     r2,[r0,#0]
        BX       lr
        ENDP


        AREA ||i.TIM_SetCompare1||, CODE, READONLY, ALIGN=1

TIM_SetCompare1 PROC
        STR      r1,[r0,#0x34]
        BX       lr
        ENDP


        AREA ||i.TIM_SetCompare2||, CODE, READONLY, ALIGN=1

TIM_SetCompare2 PROC
        STR      r1,[r0,#0x38]
        BX       lr
        ENDP


        AREA ||i.TIM_SetCompare3||, CODE, READONLY, ALIGN=1

TIM_SetCompare3 PROC
        STR      r1,[r0,#0x3c]
        BX       lr
        ENDP


        AREA ||i.TIM_SetCompare4||, CODE, READONLY, ALIGN=1

TIM_SetCompare4 PROC
        STR      r1,[r0,#0x40]
        BX       lr
        ENDP


        AREA ||i.TIM_SetCounter||, CODE, READONLY, ALIGN=1

TIM_SetCounter PROC
        STR      r1,[r0,#0x24]
        BX       lr
        ENDP


        AREA ||i.TIM_SetIC1Prescaler||, CODE, READONLY, ALIGN=1

TIM_SetIC1Prescaler PROC
        LDRH     r2,[r0,#0x18]
        MOV      r3,#0xfff3
        ANDS     r2,r2,r3
        STRH     r2,[r0,#0x18]
        LDRH     r2,[r0,#0x18]
        ORRS     r2,r2,r1
        STRH     r2,[r0,#0x18]
        BX       lr
        ENDP


        AREA ||i.TIM_SetIC2Prescaler||, CODE, READONLY, ALIGN=1

TIM_SetIC2Prescaler PROC
        LDRH     r2,[r0,#0x18]
        MOV      r3,#0xf3ff
        ANDS     r2,r2,r3
        STRH     r2,[r0,#0x18]
        LDRH     r2,[r0,#0x18]
        MOV      r3,#0xffff
        AND      r3,r3,r1,LSL #8
        ORRS     r2,r2,r3
        STRH     r2,[r0,#0x18]
        BX       lr
        ENDP


        AREA ||i.TIM_SetIC3Prescaler||, CODE, READONLY, ALIGN=1

TIM_SetIC3Prescaler PROC
        LDRH     r2,[r0,#0x1c]
        MOV      r3,#0xfff3
        ANDS     r2,r2,r3
        STRH     r2,[r0,#0x1c]
        LDRH     r2,[r0,#0x1c]
        ORRS     r2,r2,r1
        STRH     r2,[r0,#0x1c]
        BX       lr
        ENDP


        AREA ||i.TIM_SetIC4Prescaler||, CODE, READONLY, ALIGN=1

TIM_SetIC4Prescaler PROC
        LDRH     r2,[r0,#0x1c]
        MOV      r3,#0xf3ff
        ANDS     r2,r2,r3
        STRH     r2,[r0,#0x1c]
        LDRH     r2,[r0,#0x1c]
        MOV      r3,#0xffff
        AND      r3,r3,r1,LSL #8
        ORRS     r2,r2,r3
        STRH     r2,[r0,#0x1c]
        BX       lr
        ENDP


        AREA ||i.TIM_TIxExternalClockConfig||, CODE, READONLY, ALIGN=1

TIM_TIxExternalClockConfig PROC
        PUSH     {r4-r8,lr}
        MOV      r4,r0
        MOV      r5,r1
        MOV      r6,r2
        MOV      r7,r3
        CMP      r5,#0x60
        BNE      |L87.30|
        MOV      r3,r7
        MOVS     r2,#1
        MOV      r1,r6
        MOV      r0,r4
        BL       TI2_Config
        B        |L87.42|
|L87.30|
        MOV      r3,r7
        MOVS     r2,#1
        MOV      r1,r6
        MOV      r0,r4
        BL       TI1_Config
|L87.42|
        MOV      r1,r5
        MOV      r0,r4
        BL       TIM_SelectInputTrigger
        LDRH     r0,[r4,#8]
        ORR      r0,r0,#7
        STRH     r0,[r4,#8]
        POP      {r4-r8,pc}
        ENDP


        AREA ||i.TIM_TimeBaseInit||, CODE, READONLY, ALIGN=2

TIM_TimeBaseInit PROC
        MOVS     r2,#0
        LDRH     r2,[r0,#0]
        LDR      r3,|L88.104|
        CMP      r0,r3
        BEQ      |L88.40|
        LDR      r3,|L88.108|
        CMP      r0,r3
        BEQ      |L88.40|
        CMP      r0,#0x40000000
        BEQ      |L88.40|
        LDR      r3,|L88.112|
        CMP      r0,r3
        BEQ      |L88.40|
        LDR      r3,|L88.116|
        CMP      r0,r3
        BEQ      |L88.40|
        LDR      r3,|L88.120|
        CMP      r0,r3
        BNE      |L88.50|
|L88.40|
        MOV      r3,#0xff8f
        ANDS     r2,r2,r3
        LDRH     r3,[r1,#2]
        ORRS     r2,r2,r3
|L88.50|
        LDR      r3,|L88.124|
        CMP      r0,r3
        BEQ      |L88.72|
        LDR      r3,|L88.128|
        CMP      r0,r3
        BEQ      |L88.72|
        MOV      r3,#0xfcff
        ANDS     r2,r2,r3
        LDRH     r3,[r1,#8]
        ORRS     r2,r2,r3
|L88.72|
        STRH     r2,[r0,#0]
        LDR      r3,[r1,#4]
        STR      r3,[r0,#0x2c]
        LDRH     r3,[r1,#0]
        STRH     r3,[r0,#0x28]
        LDR      r3,|L88.104|
        CMP      r0,r3
        BEQ      |L88.94|
        LDR      r3,|L88.108|
        CMP      r0,r3
        BNE      |L88.98|
|L88.94|
        LDRB     r3,[r1,#0xa]
        STRH     r3,[r0,#0x30]
|L88.98|
        MOVS     r3,#1
        STRH     r3,[r0,#0x14]
        BX       lr
        ENDP

|L88.104|
        DCD      0x40010000
|L88.108|
        DCD      0x40010400
|L88.112|
        DCD      0x40000400
|L88.116|
        DCD      0x40000800
|L88.120|
        DCD      0x40000c00
|L88.124|
        DCD      0x40001000
|L88.128|
        DCD      0x40001400

        AREA ||i.TIM_TimeBaseStructInit||, CODE, READONLY, ALIGN=1

TIM_TimeBaseStructInit PROC
        MOV      r1,#0xffffffff
        STR      r1,[r0,#4]
        MOVS     r1,#0
        STRH     r1,[r0,#0]
        STRH     r1,[r0,#8]
        STRH     r1,[r0,#2]
        STRB     r1,[r0,#0xa]
        BX       lr
        ENDP


        AREA ||i.TIM_UpdateDisableConfig||, CODE, READONLY, ALIGN=1

TIM_UpdateDisableConfig PROC
        CBZ      r1,|L90.12|
        LDRH     r2,[r0,#0]
        ORR      r2,r2,#2
        STRH     r2,[r0,#0]
        B        |L90.22|
|L90.12|
        LDRH     r2,[r0,#0]
        MOV      r3,#0xfffd
        ANDS     r2,r2,r3
        STRH     r2,[r0,#0]
|L90.22|
        BX       lr
        ENDP


        AREA ||i.TIM_UpdateRequestConfig||, CODE, READONLY, ALIGN=1

TIM_UpdateRequestConfig PROC
        CBZ      r1,|L91.12|
        LDRH     r2,[r0,#0]
        ORR      r2,r2,#4
        STRH     r2,[r0,#0]
        B        |L91.22|
|L91.12|
        LDRH     r2,[r0,#0]
        MOV      r3,#0xfffb
        ANDS     r2,r2,r3
        STRH     r2,[r0,#0]
|L91.22|
        BX       lr
        ENDP


        AREA ||.arm_vfe_header||, DATA, READONLY, NOALLOC, ALIGN=2

        DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\FWLIB\\src\\stm32f4xx_tim.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f4xx_tim_c_c458916b____REV16|
#line 129 "..\\CORE\\core_cmInstr.h"
|__asm___15_stm32f4xx_tim_c_c458916b____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f4xx_tim_c_c458916b____REVSH|
#line 144
|__asm___15_stm32f4xx_tim_c_c458916b____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

        EXPORT TIM_ARRPreloadConfig [CODE]
        EXPORT TIM_BDTRConfig [CODE]
        EXPORT TIM_BDTRStructInit [CODE]
        EXPORT TIM_CCPreloadControl [CODE]
        EXPORT TIM_CCxCmd [CODE]
        EXPORT TIM_CCxNCmd [CODE]
        EXPORT TIM_ClearFlag [CODE]
        EXPORT TIM_ClearITPendingBit [CODE]
        EXPORT TIM_ClearOC1Ref [CODE]
        EXPORT TIM_ClearOC2Ref [CODE]
        EXPORT TIM_ClearOC3Ref [CODE]
        EXPORT TIM_ClearOC4Ref [CODE]
        EXPORT TIM_Cmd [CODE]
        EXPORT TIM_CounterModeConfig [CODE]
        EXPORT TIM_CtrlPWMOutputs [CODE]
        EXPORT TIM_DMACmd [CODE]
        EXPORT TIM_DMAConfig [CODE]
        EXPORT TIM_DeInit [CODE]
        EXPORT TIM_ETRClockMode1Config [CODE]
        EXPORT TIM_ETRClockMode2Config [CODE]
        EXPORT TIM_ETRConfig [CODE]
        EXPORT TIM_EncoderInterfaceConfig [CODE]
        EXPORT TIM_ForcedOC1Config [CODE]
        EXPORT TIM_ForcedOC2Config [CODE]
        EXPORT TIM_ForcedOC3Config [CODE]
        EXPORT TIM_ForcedOC4Config [CODE]
        EXPORT TIM_GenerateEvent [CODE]
        EXPORT TIM_GetCapture1 [CODE]
        EXPORT TIM_GetCapture2 [CODE]
        EXPORT TIM_GetCapture3 [CODE]
        EXPORT TIM_GetCapture4 [CODE]
        EXPORT TIM_GetCounter [CODE]
        EXPORT TIM_GetFlagStatus [CODE]
        EXPORT TIM_GetITStatus [CODE]
        EXPORT TIM_GetPrescaler [CODE]
        EXPORT TIM_ICInit [CODE]
        EXPORT TIM_ICStructInit [CODE]
        EXPORT TIM_ITConfig [CODE]
        EXPORT TIM_ITRxExternalClockConfig [CODE]
        EXPORT TIM_InternalClockConfig [CODE]
        EXPORT TIM_OC1FastConfig [CODE]
        EXPORT TIM_OC1Init [CODE]
        EXPORT TIM_OC1NPolarityConfig [CODE]
        EXPORT TIM_OC1PolarityConfig [CODE]
        EXPORT TIM_OC1PreloadConfig [CODE]
        EXPORT TIM_OC2FastConfig [CODE]
        EXPORT TIM_OC2Init [CODE]
        EXPORT TIM_OC2NPolarityConfig [CODE]
        EXPORT TIM_OC2PolarityConfig [CODE]
        EXPORT TIM_OC2PreloadConfig [CODE]
        EXPORT TIM_OC3FastConfig [CODE]
        EXPORT TIM_OC3Init [CODE]
        EXPORT TIM_OC3NPolarityConfig [CODE]
        EXPORT TIM_OC3PolarityConfig [CODE]
        EXPORT TIM_OC3PreloadConfig [CODE]
        EXPORT TIM_OC4FastConfig [CODE]
        EXPORT TIM_OC4Init [CODE]
        EXPORT TIM_OC4PolarityConfig [CODE]
        EXPORT TIM_OC4PreloadConfig [CODE]
        EXPORT TIM_OCStructInit [CODE]
        EXPORT TIM_PWMIConfig [CODE]
        EXPORT TIM_PrescalerConfig [CODE]
        EXPORT TIM_RemapConfig [CODE]
        EXPORT TIM_SelectCCDMA [CODE]
        EXPORT TIM_SelectCOM [CODE]
        EXPORT TIM_SelectHallSensor [CODE]
        EXPORT TIM_SelectInputTrigger [CODE]
        EXPORT TIM_SelectMasterSlaveMode [CODE]
        EXPORT TIM_SelectOCxM [CODE]
        EXPORT TIM_SelectOnePulseMode [CODE]
        EXPORT TIM_SelectOutputTrigger [CODE]
        EXPORT TIM_SelectSlaveMode [CODE]
        EXPORT TIM_SetAutoreload [CODE]
        EXPORT TIM_SetClockDivision [CODE]
        EXPORT TIM_SetCompare1 [CODE]
        EXPORT TIM_SetCompare2 [CODE]
        EXPORT TIM_SetCompare3 [CODE]
        EXPORT TIM_SetCompare4 [CODE]
        EXPORT TIM_SetCounter [CODE]
        EXPORT TIM_SetIC1Prescaler [CODE]
        EXPORT TIM_SetIC2Prescaler [CODE]
        EXPORT TIM_SetIC3Prescaler [CODE]
        EXPORT TIM_SetIC4Prescaler [CODE]
        EXPORT TIM_TIxExternalClockConfig [CODE]
        EXPORT TIM_TimeBaseInit [CODE]
        EXPORT TIM_TimeBaseStructInit [CODE]
        EXPORT TIM_UpdateDisableConfig [CODE]
        EXPORT TIM_UpdateRequestConfig [CODE]

        IMPORT ||Lib$$Request$$armlib|| [CODE,WEAK]
        IMPORT RCC_APB2PeriphResetCmd [CODE]
        IMPORT RCC_APB1PeriphResetCmd [CODE]

        KEEP TI1_Config
        KEEP TI2_Config
        KEEP TI3_Config
        KEEP TI4_Config

        ATTR FILESCOPE
        ATTR SETVALUE Tag_ABI_PCS_wchar_t,2
        ATTR SETVALUE Tag_ABI_enum_size,1
        ATTR SETVALUE Tag_ABI_optimization_goals,6
        ATTR SETSTRING Tag_conformance,"2.06"
        ATTR SETVALUE AV,18,1

        ASSERT {ENDIAN} = "little"
        ASSERT {INTER} = {TRUE}
        ASSERT {ROPI} = {FALSE}
        ASSERT {RWPI} = {FALSE}
        ASSERT {IEEE_FULL} = {FALSE}
        ASSERT {IEEE_PART} = {FALSE}
        ASSERT {IEEE_JAVA} = {FALSE}
        END
